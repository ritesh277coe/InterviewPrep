Spring boot make it easy to create Spring based application that are production grade and can run.

Spring was mainly for dependency inversion/IOC, but now it has all sort of support for almost everything that
programmer needs. That is what it makes it hard to configure Spring application to match the needs to programmer.

SpringBoot gives a quick to start a complex spring based application which used common conventional wisdom over custom configuration.
After this user is free to alter configuration for custom scenario

Most common annotation for spring based application:

@Component: Tell spring to manage the lifecycle of the bean.

{
    @Service: Belongs to service layer that implements business logic
    @Controller: Web request handler
    @Repository: Class that interact with DB and performs DB crud operation
}

@Autowired:
    Can we applied on constructor/field/setter method

@Value:
    Helps in injecting external properties (Property file) into your bean.
    Can be use when class is Component/Service/Controller/Repository bean.

@Configuration:
    Does not implement business logic rather implements code for setup/initialization of application
@ComponentScan:

@Bean
    create a spring bean by calling a function that enable user to provide N args to instantiate
    an object and then add into spring as bean.

    So Ex:
        @Configuration
        public class MyConf {
            @Bean
            MyCustomObject createCustomObject(Arg...args) {
                ...
                return new MyCustomObject(args);
            }
        }
        So Using above way to instantiate spring beans is an alternative way to create way, and pretty
        much we stop all above ways to create objects that are created using
        Component/Repository/Service/Controller
        All these above mentioned creates Beans using TYPE, but @Bean lets user create a bean using function signature

@Transactional:
    //Need example
    Provide method

@RequestMapping: Helps in routing web requests
    @Controller
    @RequestMapping("/orders")
    public class OrderController {
        @GetMapping             //PutMapping/PostMapping/DeleteMapping
        Orders getOrders();

        @GetMapping("/{id}")
        Orders getOrders(@PathVariable int id){};
    }

@RestController
    Best fro rest api classes

@SpringBootApplication
    Put it on main all code becomes spring beans
    It is a combination as @Configuration/@EnableAutoConfiguration/@ComponentScan


