###
    Quick mysql+boot:  https://www.youtube.com/watch?v=voA01jXkXtk&list=PLVz2XdJiJQxw-jVLpBfVn2yqjvA1Ycceq&index=4
    Hibernate:  https://www.youtube.com/watch?v=7h93K98kSV8&list=PLVz2XdJiJQxw-jVLpBfVn2yqjvA1Ycceq&index=5

    Multiple servers at same time: (custom datasource, entitymanager, transaction manager)
                        https://www.youtube.com/watch?v=LKxu7TY1gD8
    JPA many-2-many:    https://www.youtube.com/watch?v=jCYonZey5dY
    JPA One2One:        https://www.youtube.com/watch?v=2fvUrpYG95w

    OneToMany:
    github:             https://github.com/Java-Techie-jt/JPA-ManyToMany/
                        https://github.com/Dev2ProdCoding/spring-data-jpa-mappings/
                        https://github.com/Java-Techie-jt/spring-data-jpa-one2many-join-example/

Paging and sorting:
    youtube:            https://www.youtube.com/watch?v=OoVrNnGR1w0&ab_channel=Dev2ProdCoding
    github:             https://github.com/Dev2ProdCoding/spring-data-jpa-springboot
    Sample:
                        public Page<Employee> employeePagination(@PathVariable Integer pageNumber,
                                                                 @PathVariable Integer pageSize,
                                                                 @PathVariable String sortProperty) { //Name of column to sort by
                                return employeeService.getEmployeePagination(pageNumber, pageSize, sortProperty);
                        }
                        public Page<Employee> getEmployeePagination(Integer pageNumber, Integer pageSize, String sortProperty) {
                                Pageable pageable = null;
                                if(null!=sortProperty){
                                    pageable = PageRequest.of(pageNumber, pageSize, Sort.Direction.ASC,sortProperty);
                                }else {
                                    pageable = PageRequest.of(pageNumber, pageSize, Sort.Direction.ASC,"name");
                                }
                                return employeeRepository.findAll(pageable);
                        }

Join query:
public interface CustomerRepository extends JpaRepository<Customer,Integer> {
   @Query("SELECT new com.javatechie.jpa.dto.OrderResponse(c.name , p.productName) FROM Customer c JOIN c.products p")
    public List<OrderResponse> getJoinInformation();
}


Transaction support:
    https://www.youtube.com/watch?v=95kxPSbHzVg&t=1s
    https://github.com/Java-Techie-jt/spring-transaction-example/tree/main


###
Add properties to application.properties
    spring.datasource.driver-class-name=com.mysql.jdbc.Driver
    spring.datasource.url = jdbc:mysql://localhost:3306/ticket
    spring.datasource..username = root
    spring.datasource..password = test
    spring.jpa.show-sql = true
    spring.jpa.hibernate.ddl-auto = update
    spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
    server.port =
    server.address

### Add to pom file:
    spring-boot-starter-web / JPA/ MySql /lombock(preference)

### Add packages to source code:
    model
        TableTicket.java
            @Entity
            @Table(name = "Ticket")
            //Add all lombok annotation like: Getter/Setter/NoArgsConstructor/AllArgsConstructor/ToString/Hash/Equals
            public class Ticket {
                @Id
                @GeneratedValue
                public int id;
                public int amount;
                public int category;
            }

    dao or repository
        @Repository
        TicketDao.java  (Its an interface)
            public interface TicketDao extends JpaRepository<Ticket, Integer> {
            }

    controller
        TicketController.java
            @RestController
            @@RequestMapping("api/v1/tickets")
            public class TicketController {
                @Autowired
                private TicketDao ticketDao;

                @GetMapping(/{id})
                public Ticket getTicket(@PathVariable("id) int id) {
                    return ticketDao.find(id);
                }

                @GetMapping(/)
                public List<Ticket> getTickets() {
                    return ticketDao.findAll();
                }

                @PostMapping(/)
                public String bookTickets(@RequestBody List<Ticket> tickets) {
                    ticketDao.save(tickets);
                    return "Booked tickets: " + tickets.size();
                }

            }



