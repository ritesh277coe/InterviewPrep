package: java.util.Function

Function<T,R>, call apply
BiFunction<T1, T2, R>, calls apply
Consumer<T>, calls accept
Predicate<T> calls test
Supplier<R> calls get

are all interfaces.
When user (a, b) -> { .....}, then it is creating a class which implements the apply/accept/test/get of respective interface.
That is why we can do, for ex: Function<T,R> f = () -> {...} where LHS create a class and f points to interface implemented by class
So when user does f.apply or c.accept or p.test or s.get, its calling the implementation on LHS side.

So when user does FunctionInterface<..> fi = () -> {};
Then LHS is implementing apply or accept or test or get depending upon type of functional interface.

function<T, R> where T is input type and R is return type
    apply

BiFunction<T1, T2, R> where T1/T2 are input type and R is return type
    apply

Consumer<T> where T in input type and returns void
    accept

Predicate<T> where T is input type and it always return boolean
    test

Supplier<R> takes no input, but return type R
    get

WHERE ARE THESE FUNCTIONAL INTERFACE ARE USED in STREAMING APIS